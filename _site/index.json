{
  "EMAIL_NOTIFICATION_PLAN.html": {
    "href": "EMAIL_NOTIFICATION_PLAN.html",
    "title": "Email Notification System Implementation Plan | mysite",
    "summary": "Email Notification System Implementation Plan \uD83D\uDCCB Proje Hedefi Zimmet teslim tarihi yaklaşan kullanıcılara otomatik email bildirimleri gönderen bir sistem geliştirmek. \uD83C\uDFD7️ Sistem Mimarisi Bileşenler: Email Service - SMTP ile email gönderimi Notification Service - İş kuralları ve bildirim mantığı Background Job - Otomatik görev çalıştırma SQL Server Job - Zamanlanmış görev yürütme Template Engine - Email şablonları \uD83C\uDFAF Gereksinimler Fonksiyonel Gereksinimler: [ ] Teslim tarihi 3 gün kala uyarı maili gönderme [ ] Teslim tarihi geçen laptoplar için gecikme maili [ ] Çoklu uyarı seviyesi (7 gün, 3 gün, 1 gün, gecikme) [ ] HTML email template'leri [ ] Email gönderim logları [+] SMTP ayarları yapılandırma Teknik Gereksinimler: [+] .NET 8.0 MailKit/SmtpClient kullanımı [+] SQL Server Agent Job oluşturma [+] Configuration-based SMTP settings [+] Error handling ve retry mechanism [+] Logging ve monitoring \uD83D\uDCD0 Detaylı İmplementasyon Planı Phase 1: Email Infrastructure (Adım 1-3) Adım 1: Email Models ve Configuration [+] Email configuration model oluşturma [+] SMTP settings appsettings.json'a ekleme [+] Email template modelleri oluşturma Adım 2: Email Service Implementation [+] IEmailService interface oluşturma [+] EmailService class implementasyonu [+] SMTP client configuration [+] HTML email template support Adım 3: Email Templates [ ] Uyarı email template'i [ ] Gecikme email template'i [+] Template engine (Razor/Liquid) entegrasyonu Phase 2: Notification Logic (Adım 4-6) Adım 4: Notification Service [ ] INotificationService interface [ ] NotificationService implementation [ ] İş kuralları: hangi durumlarda mail gönderileceği [ ] Assignment due date calculations Adım 5: Database Enhancements [ ] Email log tablosu oluşturma [ ] Notification settings tablosu [ ] Assignment tablosuna notification fields ekleme Adım 6: Background Job Service [ ] IBackgroundJobService interface [ ] Console application veya hosted service [ ] SQL Server job'dan çağrılabilir endpoint Phase 3: SQL Server Integration (Adım 7-9) Adım 7: SQL Server Job Creation [ ] SQL Server Agent job oluşturma [ ] Scheduled execution (günlük, haftalık) [ ] Job parameters ve configuration Adım 8: Error Handling & Logging [ ] Comprehensive error handling [ ] Email sending failure retry logic [ ] Detailed logging (Serilog integration) [ ] Job execution monitoring Adım 9: Testing & Validation [ ] Unit tests for email service [ ] Integration tests [ ] Manual testing with test emails [ ] Performance testing Phase 4: Advanced Features (Adım 10-12) Adım 10: Advanced Notifications [ ] Multiple notification levels [ ] User preferences (email frequency) [ ] Manager notifications [ ] Bulk assignment notifications Adım 11: Monitoring & Analytics [ ] Email delivery tracking [ ] Open rate tracking (optional) [ ] Notification effectiveness metrics [ ] Dashboard for email statistics Adım 12: Security & Compliance [ ] SMTP authentication security [ ] Email content sanitization [ ] GDPR compliance considerations [ ] Opt-out mechanisms \uD83D\uDDC2️ Dosya Yapısı (Ekleme Planı) ITAssetManagement.Web/ ├── Models/ │ ├── Email/ │ │ ├── EmailConfiguration.cs │ │ ├── EmailTemplate.cs │ │ ├── EmailLog.cs │ │ └── NotificationSettings.cs │ └── Notifications/ │ ├── NotificationRequest.cs │ └── NotificationResult.cs ├── Services/ │ ├── Interfaces/ │ │ ├── IEmailService.cs │ │ ├── INotificationService.cs │ │ └── IBackgroundJobService.cs │ ├── EmailService.cs │ ├── NotificationService.cs │ └── BackgroundJobService.cs ├── Templates/ │ ├── Email/ │ │ ├── AssignmentDueWarning.html │ │ ├── AssignmentOverdue.html │ │ └── AssignmentReminder.html ├── Jobs/ │ └── NotificationJob.cs (Console App veya Hosted Service) └── Scripts/ └── SQL/ ├── CreateEmailLogTable.sql ├── CreateNotificationSettingsTable.sql └── CreateSQLServerJob.sql ⚙️ Configuration Örneği { \"EmailSettings\": { \"SmtpHost\": \"smtp.company.com\", \"SmtpPort\": 587, \"SmtpUsername\": \"noreply@company.com\", \"SmtpPassword\": \"password\", \"EnableSsl\": true, \"FromEmail\": \"noreply@company.com\", \"FromName\": \"IT Asset Management System\" }, \"NotificationSettings\": { \"WarningDaysBefore\": [7, 3, 1], \"CheckFrequencyHours\": 24, \"EnableNotifications\": true, \"MaxRetryAttempts\": 3 } } \uD83D\uDD04 İş Akışı SQL Server Job günlük çalışır Background Service tetiklenir Notification Service assignment'ları kontrol eder Kriterlere uyan kayıtlar için Email Service devreye girer SMTP ile email gönderimi Email Log kaydı oluşturulur Error handling ve retry logic \uD83D\uDCCA Bildirim Kriterleri Uyarı Seviyeleri: 7 Gün Öncesi: İlk uyarı 3 Gün Öncesi: İkinci uyarı 1 Gün Öncesi: Son uyarı Gecikme: Teslim tarihi geçenler için Email İçeriği: Kullanıcı adı ve iletişim bilgileri Laptop detayları (marka, model, tag no) Teslim tarihi Kalan gün sayısı İletişim bilgileri (IT departmanı) \uD83D\uDE80 Uygulama Sırası Haftaici 1: Phase 1 (Email Infrastructure) Haftaici 2: Phase 2 (Notification Logic) Haftaici 3: Phase 3 (SQL Server Integration) Haftaici 4: Phase 4 (Advanced Features) \uD83C\uDFAF Başlangıç Adımları (İlk 3 Adım) Adım 1: Email Configuration ve Models EmailConfiguration.cs model oluşturma appsettings.json'a SMTP ayarları ekleme EmailLog.cs model oluşturma Adım 2: IEmailService Interface ve Basic Implementation Interface tanımlama Basic SMTP client implementation DI container'a service ekleme Adım 3: İlk Email Template Simple HTML template oluşturma Template test endpoint oluşturma Manual email sending test Bu planla başlayıp adım adım ilerleyebiliriz. Hangi adımdan başlamak istiyorsunuz?"
  },
  "ITAssetManagement.Web/Documentation/getting-started.html": {
    "href": "ITAssetManagement.Web/Documentation/getting-started.html",
    "title": "Getting Started | mysite",
    "summary": "Getting Started"
  },
  "ITAssetManagement.Web/Documentation/introduction.html": {
    "href": "ITAssetManagement.Web/Documentation/introduction.html",
    "title": "Introduction | mysite",
    "summary": "Introduction"
  },
  "README.html": {
    "href": "README.html",
    "title": "IT Asset Management System | mysite",
    "summary": "IT Asset Management System An ASP.NET Core MVC application for managing IT assets in an organization. This system provides comprehensive laptop inventory management, user management, and assignment tracking capabilities. \uD83C\uDFD7️ Project Architecture The project follows a clean layered architecture with separation of concerns: Architecture Layers: Controllers (Presentation Layer) - MVC Controllers handling HTTP requests Services (Business Logic Layer) - Business logic and data processing Repositories (Data Access Layer) - Data persistence using Repository pattern Models (Domain Layer) - Entity models and data structures Design Patterns: Repository Pattern for data access abstraction Service Layer Pattern for business logic encapsulation Dependency Injection for loose coupling Soft Delete Pattern for data safety \uD83D\uDEE0️ Technology Stack Framework: ASP.NET Core 8.0 MVC Database: SQL Server (LocalDB for development) ORM: Entity Framework Core 8.0.11 UI: Bootstrap 5, FontAwesome Icons Barcode Generation: ZXing.Net with ImageSharp integration Image Processing: SixLabors.ImageSharp \uD83D\uDCC1 Project Structure ITAssetManagement.Web/ ├── Controllers/ # MVC Controllers │ ├── LaptopsController.cs │ ├── UsersController.cs │ ├── AssignmentsController.cs │ └── HomeController.cs ├── Models/ # Entity Models │ ├── Laptop.cs │ ├── User.cs │ ├── Assignment.cs │ ├── LaptopPhoto.cs │ └── LaptopLog.cs ├── Services/ # Business Logic Services │ ├── Interfaces/ │ ├── LaptopService.cs │ ├── UserService.cs │ ├── AssignmentService.cs │ └── BarcodeService.cs ├── Data/ # Data Access Layer │ ├── Repositories/ │ └── ApplicationDbContext.cs ├── Views/ # Razor Views ├── Extensions/ # Helper Extensions ├── Migrations/ # EF Core Migrations └── wwwroot/ # Static Files \uD83D\uDE80 Getting Started Prerequisites .NET 8.0 SDK SQL Server or SQL Server Express LocalDB Visual Studio 2022 or VS Code Installation Steps Clone the repository git clone [repository-url] cd ITAssetManagement Configure Database Connection Update connection string in appsettings.json: { \"ConnectionStrings\": { \"DefaultConnection\": \"Server=(localdb)\\\\MSSQLLocalDB;Database=ITAssetManagementDB_Dev;Trusted_Connection=True;MultipleActiveResultSets=true\" } } Run Database Migrations cd ITAssetManagement.Web dotnet ef database update Build and Run dotnet build dotnet run Access the Application Open browser and navigate to https://localhost:5001 or http://localhost:5000 ✨ Features \uD83D\uDCBB Laptop Management CRUD Operations: Create, view, edit, and delete laptop records Soft Delete: Safe deletion with restoration capability Search & Filter: Search by brand, model, tag number, or ID Pagination: Efficient data browsing with 10 items per page Photo Management: Upload and manage laptop photos Barcode Generation: Generate CODE_128 barcodes for asset tracking Notes System: Add detailed notes to laptop records Status Tracking: Monitor laptop availability and condition \uD83D\uDC65 User Management User Profiles: Manage user information including contact details Department & Position: Track organizational structure Email Validation: Ensure valid email addresses Assignment History: View user's laptop assignment history \uD83D\uDCCB Assignment Management Asset Assignment: Assign laptops to users with date tracking Return Management: Process laptop returns with timestamps Assignment History: Complete audit trail of all assignments Available Assets: Track which laptops are currently available \uD83D\uDCCA Additional Features Audit Logging: Comprehensive logging of all asset changes Responsive UI: Mobile-friendly Bootstrap interface Data Validation: Server-side and client-side validation Error Handling: Graceful error handling with user feedback TempData Messaging: Success, error, and info notifications \uD83D\uDDC4️ Database Schema Core Entities: Laptops: Asset information with soft delete support Users: Employee/user information Assignments: Laptop-user assignment relationships LaptopPhotos: Photo attachments for laptops LaptopLogs: Audit trail for asset changes Key Features: Soft Delete: Laptops marked as inactive instead of physical deletion Foreign Key Relationships: Proper relational integrity Data Annotations: Validation rules and display formatting Cascade Delete: Automatic cleanup of related records \uD83D\uDD27 Development Guidelines Code Standards: Follow C# naming conventions (PascalCase for classes, camelCase for variables) Use async/await for all database operations Implement proper error handling with try-catch blocks Apply SOLID principles in design Use dependency injection for service registration Database Guidelines: Use Entity Framework Core migrations for schema changes Implement proper data annotations for validation Use soft delete for important entities Include audit fields where necessary \uD83D\uDEA6 Migration History AddNotesToLaptop (2025-07-29): Added Notes field to Laptop entity RemoveUnnecessaryColumns (2025-07-22): Cleaned up unused columns AddDateFieldsToAssignment (2025-07-22): Enhanced assignment date tracking SoftDeleteForLaptops (2025-07-15): Implemented soft delete functionality AddDeletedLaptopsTable (2025-07-10): Initial deleted laptops tracking \uD83D\uDD2E Future Enhancements Authentication & Authorization: User login and role-based access API Endpoints: RESTful API for external integrations Email Notifications: Automated notifications for assignments Advanced Reporting: Dashboard and analytics File Upload Security: Enhanced security for photo uploads Caching Strategy: Performance optimization Unit Testing: Comprehensive test coverage \uD83D\uDCDD Contributing Fork the repository Create a feature branch Follow the coding standards Write tests for new features Submit a pull request \uD83D\uDCC4 License This project is for internal organizational use."
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | mysite",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}